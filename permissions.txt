random:
    we make groups and put users in them. Then, based on these groups,
        we decide whether to show a page or not.


    model level permissions:




    ****************** DJANGO DOCS **********************



    ----- permissions and authorisation:-----

    Django comes with a built-in permissions system


    we can overwrite 
        has_add_permssions(), has_change_permssions(),
        has_delete_permssions(), has_view_permssions()
    methods provided by the ModelAdmin class, it is possible to
    customize permissions for different object instances of 
    the same type.


    User objects have two many-to-many fields: groups 
    and user_permissions





    ----- Default Permissions ------


    When django.contrib.auth is listed in your INSTALLED_APPS,there 
    are 4 types of permissions created for each model in all apps:
        view
        change
        add
        delete

    These permissions are created each time you run migrate command

    to test for basic permissions you should use:
        permission to add: user.has_perm('app_name.add_Model')
        permission to change: user.has_perm('app_name.change_Model')



    ------------------ Groups ----------------





*********************** 4 PART SERIES **************************


--------- PART 1: MODEL LEVEL PERMISSIONS (ADMIN SITE) ----------


Topics covered:

    Explored django permissions system

    authorisation and authentication

    user objects

    inpsect permissions models

    applying permissions to user and groups

    assigning admin site model permissions


authorisation and authentication:
    Authentication:
        determining identity of a user, server or client

    Authorization:
        determining what resources a user can access


User object:
    only one user object in the django project, but a user can be:
        superuser: can access and alter everything 
        staff: required to be true to login to the admin panel, but see and do only permitted actions
        user: cant login to admin panel
    

Common authorisation methodologies:
    Role based access control
    attribute based access control


tables in django.contrib.auth application:
    created automatically on the inital makemigrations and migrate


    auth_user:
        stores all the users in project

    auth_group
        stores all the gropus in project

    auth_user_group
        stores all the records of which users belong to which groups
        many-to-many field

    auth_user_user_permissions
        store all the permission available to all the users
        many-to-many field

    auth_group_permissions
        store all the permission available to all the groups
        many-to-many field

    auth_permissions table:
        stores all the available permission for all te models of all applications
        has 4 field:
            id: the usual primary key
            content_type_id: the type of model that the permission pertains to
            codename: brief name of the permission and model
            name: full name of the permission and model



28:30 -
Suppose you've given a user permission to change a certain model,
 but you dont want them to change everything in that model. Then,
 you'd want to customize the admin panel so that only certain fields
 show up for alteration even tho user has change permission.

    This is done by overriding the get_form(serlf, request, **kwargs) method in a subclass of
     admin.ModelAdmin class.
  
    You can also override the permissions by overriding the methods
     has_add_permssion(self, request), has_view_permssion(self, request)
     etc in the same subclass of admin.ModelAdmin class


    We can check if a given user has a certain permission by using:
        user.has_perm("appName.add_modelName")
        user.has_perm("appName.change_modelName")
        user.has_perm("appName.view_modelName")
        user.has_perm("appName.delete_modelName")
     This method works even if the user belongs to a group that 
     has that certain permission.
    


51:00 - 
If you want to limit how much a user can access or change the data of
 the user and groups table, we need to first unregister these models.
 Then register them with custom admin.ModelAdmin classes where we decide
 what to show what not to.




--------- PART 2: OBJECT LEVEL PERMISSIONS (ADMIN SITE) ---------


Topics covered:
    install Django guardian
    Apply Object level permissions
    Configure OLP Admin Site Models
 


Install django guardian:
    pip install django-guardian
    put it in the installed apps
    setup the AUTHENTICATION_BACKEND configuration for guardian.

    
    Now, when we register our models in admin.py using the custom class,
     we will use GuardedModelAdmin instead of ModelAdmin


